server:
  port: 9101
  servlet:
    context-path: /study-city
spring:
  application:
    name: study-city
  cloud:
    config:
      enabled: false

  datasource:
    url: jdbc:mysql://127.0.0.1:3306/study?useUnicode=true&characterEncoding=UTF-8&serverTimezone=UTC&useSSL=false
    username: root
    password: 910214
    driver-class-name: com.mysql.jdbc.Driver #5.0版本的数据库驱动配置
  #    driver-class-name: com.mysql.cj.jdbc.Driver #8.0高版本得数据库驱动配置
  redis:
    host: 127.0.0.1
    port: 6379
    password: 123456
    pool:
      max-active: 8
      max-wait: -1
      max-idle: 8
      min-idle: 0
    timeout: 30000

  #给swagger加密 2022-04-18
  security:
    basic:
      path: /swagger-ui.html
      enabled: true
    user:
      name: admin
      password: 123456

  # 邮件 2021-09-24
  mail:
    host: smtp.qq.com           # 配置SMTP服务地址
    username: zhangpba@qq.com   # 发送者邮箱
    password: fhjpibgkvndmdhhf       # 配置密码，注意不是真正的密码，而是刚刚申请到的授权码
    port: 587                   # 端口号465或587
    default-encoding: UTF-8     # 默认的邮件编码为UTF-8
    properties:
      mail:
        stmp:
          socketFactoryClass: javax.net.ssl.SSLSocketFactory
        debug: true             # 表示开启 DEBUG 模式，这样，邮件发送过程的日志会在控制台打印出来，方便排查错误
    # 默认邮件需要发送的人
    send:
      default: # 默认邮件接收人，所有额邮件都会接收的邮箱 123@qq.com,456@qq.com
        users: 123456@tencent.com
        bcc: 123456@qq.com # 隐秘抄送人
      # 配置文件中的都为隐秘抄送人
      character:
        users: 123456@tencent.com
      pyq:
        switch: 0
        users: 123456@qq.com                # 隐秘抄送人
        key: b45e887eea69923ba8b7a4dcca0ef295
        syn-cron: 0 0 06 * * * # 每天6：00执行一次
      gdmj:
        switch: 1
        users: 123456@tencent.com
        key: b45e887eea69923ba8b7a4dcca0ef295
        syn-cron: 0 0 9 * * * # 每天9：00执行一次
      say-love: # 土味情话
        switch: 0
        users: 123456@qq.com
        key: b45e887eea69923ba8b7a4dcca0ef295
        syn-cron: 0 30 06 * * * # 每天6：30执行一次
      lunar:    # 老黄历
        switch: 1
        users: 123456@qq.com
        key: b45e887eea69923ba8b7a4dcca0ef295
        syn-cron: 0 10 0 * * * # 每天凌晨00：10执行一次
      one-day:
        switch: 1
        users: 123456@qq.com,123456@tencent.com
        key: b45e887eea69923ba8b7a4dcca0ef295
        syn-cron: 0 30 10 * * * # 每天凌晨06：00执行一次
      remind:
        switch: 1
        users: 123456@qq.com,123456@qq.com
        syn-cron: 0 01 10 * * * # 每天凌晨10：01执行一次

management:
  security:
    enabled: false

mybatis:
  mapper-locations: classpath:mapper/**/*.xml # 由于'classpath:mapper/*.xml'扫描不到还款计划明细下面的mapper，所以做修改2021-08-12
  configuration:
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl

eureka:
  client:
    register-with-eureka: true            #是否从注册中心中获取注册信息，默认值true
    fetch-registry: true                  #是否从注册中心获取注册消息
    registry-fetch-interval-seconds: 30   #表示eureka client间隔多久去拉取服务器注册信息,默认为30秒
    service-url:
      defaultZone: http://127.0.0.1:8815/eureka/
  #      defaultZone: http://192.168.182.128:8815/eureka/   #客户端和服务器端进行交互的地址

  instance:
    prefer-ip-address: true
    lease-expiration-duration-in-seconds: 1
    lease-renewal-interval-in-seconds: 2

#pagehelper 分页插件
pagehelper:
  helperDialect: mysql
  #开启优化，如果开启优化，在分页页码结果没有数据的时候,会显示有数据的页码数据
  reasonable: true
  #是否支持接口参数来传递分页参数，默认false
  supportMethodsArguments: true
  #pageSize=0 返回所有
  pageSizeZero: false
  params: count=countSql

# ip黑名单
black-list:
  ip: 127.0.0.2,127.0.0.3

# 同步数据
module:
  weather:
    syn-cron: 0 30 01 * * * # 每天1：30执行一次
  #  syn-cron: "*/5 * * * * *"  #每五秒执行一次
  gold:
    appkey: a09971b7353c6d08
    syn-cron: 0 30 23 * * * # 每天23：30执行一次
  character:
    key: b45e887eea69923ba8b7a4dcca0ef295
    syn-cron: 0 30 02 * * * # 每天1：30执行一次

http:
  # 最大连接数
  maxTotal: 100
  # 并发数
  defaultMaxPerRoute: 20
  # 创建连接的最长时间
  connectTimeout: 1000
  # 从连接池中获取到连接的最长时间
  connectionRequestTimeout: 500
  # 数据传输的最长时间
  socketTimeout: 10000
  # 提交请求前测试连接是否可用
  staleConnectionCheckEnabled: true
  # 可用空闲连接过期时间,重用空闲连接时会先检查是否空闲时间超过这个时间，如果超过，释放socket重新建立
  validateAfterInactivity: 3000000

logging:
  level:
    root: INFO                    #默认的日志级别
  file: log/study-city.log  #生成日志文件的位置 e:/study-redis.log