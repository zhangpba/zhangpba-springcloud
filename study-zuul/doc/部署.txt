环境
安装jdk

一 打包
    选择release打.tar.gz包

二 打好的 .tar.gz包上传服务器解压到路径/opt/zhangpb/
    tar -zxvf study-zuul.tar.gz -C /opt/zhangpb/

三 执行脚本
    ./opt/zhangpb/study-user/install.sh
    ./opt/zhangpb/study-user/start.sh



Test:
    启动study-eureka
    启动study-user
    启动study-file
    启动study-zuul
    请求：http://localhost:8888/api/client/getFile?name=测试zuul
        请求过程描述：
            1.postman调用zuul的端口：8888，
            2.study-zuul请求服务名study-user的其中一个服务'client/getFile'
            3.study-user通过feign接口请求study-file





* zuul网关的学习地址：https://www.cnblogs.com/jing99/p/11696192.html

学习：
    一 网关的作用
        统一入口：未全部为服务提供一个唯一的入口，网关起到外部和内部隔离的作用，保障了后台服务的安全性。
        鉴权校验：识别每个请求的权限，拒绝不符合要求的请求。
        动态路由：动态的将请求路由到不同的后端集群中。
        减少客户端与服务端的耦合：服务可以独立发展，通过网关层来做映射。

    二 网关的应用
        1 网关访问方式
            通过zuul访问服务的，URL地址默认格式为：http://zuulHostIp:port/要访问的服务名称/服务中的URL
            服务名称：properties配置文件中的spring.application.name。
            服务的URL：就是对应的服务对外提供的URL路径监听。
        2 网关依赖注入
        3 网关启动
        4 网关全局变量配置
            4.1 URL路径匹配
                # URL pattern
                # 使用路径方式匹配路由规则。
                # 参数key结构： zuul.routes.customName.path=xxx
                # 用于配置路径匹配规则。
                # 其中customName自定义。通常使用要调用的服务名称，方便后期管理
                # 可使用的通配符有： * ** ?
                # ? 单个字符
                # * 任意多个字符，不包含多级路径
                # ** 任意多个字符，包含多级路径
                zuul.routes.eureka-application-service.path=/api/**
                # 参数key结构： zuul.routes.customName.url=xxx
                # url用于配置符合path的请求路径路由到的服务地址。
                zuul.routes.eureka-application-service.url=http://127.0.0.1:8080/

            4.2 服务名称匹配
                # service id pattern 通过服务名称路由
                # key结构 ： zuul.routes.customName.path=xxx
                # 路径匹配规则
                zuul.routes.eureka-application-service.path=/api/**
                # key结构 ： zuul.routes.customName.serviceId=xxx
                # serviceId用于配置符合path的请求路径路由到的服务名称。
                zuul.routes.eureka-application-service.serviceId=eureka-application-service

            4.3 路由排除配置
                # ignored service id pattern
                # 配置不被zuul管理的服务列表。多个服务名称使用逗号','分隔。
                # 配置的服务将不被zuul代理。
                zuul.ignored-services=eureka-application-service

                # 此方式相当于给所有新发现的服务默认排除zuul网关访问方式，只有配置了路由网关的服务才可以通过zuul网关访问
                # 通配方式配置排除列表。
                zuul.ignored-services=*
                # 使用服务名称匹配规则配置路由列表，相当于只对已配置的服务提供网关代理。
                zuul.routes.eureka-application-service.path=/api/**

                # 通配方式配置排除网关代理路径。所有符合ignored-patterns的请求路径都不被zuul网关代理。
                zuul.ignored-patterns=/**/test/**
                zuul.routes.eureka-application-service.path=/api/**

            4.4 路由前缀配置
                # prefix URL pattern 前缀路由匹配
                # 配置请求路径前缀，所有基于此前缀的请求都由zuul网关提供代理。
                zuul.prefix=/api
                # 使用服务名称匹配方式配置请求路径规则。
                # 这里的配置将为：http://ip:port/api/appservice/**的请求提供zuul网关代理，可以将要访问服务进行前缀分类。
                # 并将请求路由到服务eureka-application-service中。
                zuul.routes.eureka-application-service.path=/appservice/**

        5 Zuul网关配置总结
            网关配置方式有多种，默认、URL、服务名称、排除|忽略、前缀。
            网关配置没有优劣好坏，应该在不同的情况下选择合适的配置方案。
            zuul网关其底层使用ribbon来实现请求的路由，并内置Hystrix，可选择性提供网关fallback逻辑。使用zuul的时候，并不推荐使用Feign作为application client端的开发实现。毕竟Feign技术是对ribbon的再封装，使用Feign本身会提高通讯消耗，降低通讯效率，只在服务相互调用的时候使用Feign来简化代码开发就够了。而且商业开发中，使用Ribbon+RestTemplate来开发的比例更高。

    三 Zuul网关过滤器

            前置过滤：是请求进入Zuul之后，立刻执行的过滤逻辑。
            路由后过滤：是请求进入Zuul之后，并Zuul实现了请求路由后执行的过滤逻辑，路由后过滤，是在远程服务调用之前过滤的逻辑。
            后置过滤：远程服务调用结束后执行的过滤逻辑。
            异常过滤：是任意一个过滤器发生异常或远程服务调用无结果反馈的时候执行的过滤逻辑。无结果反馈，就是远程服务调用超时。

        1 过滤器的实现方式
            继承父类ZuulFilter。在父类中提供了4个抽象方法，分别是：filterType, filterOrder, shouldFilter, run。其功能分别是：

            filterType：方法返回字符串数据，代表当前过滤器的类型。可选值有-pre, route, post, error。
                pre - 前置过滤器，在请求被路由前执行，通常用于处理身份认证，日志记录等；
                route - 在路由执行后，服务调用前被调用；
                error - 任意一个filter发生异常的时候执行或远程服务调用没有反馈的时候执行（超时），通常用于处理异常；
                post - 在route或error执行后被调用，一般用于收集服务信息，统计服务性能指标等，也可以对response结果做特殊处理。

            filterOrder：返回int数据，用于为同filterType的多个过滤器定制执行顺序，返回值越小，执行顺序越优先。
            shouldFilter：返回boolean数据，代表当前filter是否生效。
            run：具体的过滤执行逻辑。如pre类型的过滤器，可以通过对请求的验证来决定是否将请求路由到服务上；如post类型的过滤器，可以对服务响应结果做加工处理（如为每个响应增加footer数据）。
        2 过滤器的生命周期
    四 Zuul网关的容错（与Hystrix无缝结合）
        1 Zuul中的服务降级处理
    五 Zuul网关的限流保护
        1 全局限流配置
        2 局部限流配置
        3 限流参数
    六 Zuul网关的性能调优：网关的两层超时调优