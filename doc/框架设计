这是一个纯净版本的springcloud框架，可以直接打包上服务器部署，有成熟的shell脚本用来启动和停止服务，该版本为1

公共工程：study-common
注册中心：study-eureka   8815
文件工程：study-file     8816
用户服务：study-user     8817
缓存服务：study-redis    8819
网关服务：study-zuul     8888
配置中心-服务端：study-config-server    9001
配置中心-客户端：study-config-client    9002

服务的降级在study-user
服务的熔断在study-file

邮件服务：study-email      8820
消息队列服务：study-stream  8821 & 8822

城市服务s: study-city     9101

1   公共工程：study-common   公共服务：所有服务依赖它，所有的公共Entiry，公共方法，帮助类，静态类
    注册中心：study-eureka   注册中心：发现所有的服务提供者，并注册；发现所有的消费者服务，并注册
    文件工程：study-file     文件服务：provider
    用户服务：study-user     用户服务：consumer

2   feign接口测试：
    启动注册中心（eureka），启动文件服务（file），启动用户服务（user），
    用户服务调用文件服务：
        GET请求：  http://localhost:8817/client/getFile?name=zhang
        POST请求： http://localhost:8817/client/postFile
                {
                	"name":"postSend"
                }

        文件服务作为服务提供者provider，用户服务作为服务消费者consumer，被调用方打赢日志

3 网关服务
    有了网关之后，外来系统要访问服务集群的任何一个微服务，都统一请求网关的端口8888，网关代理所有的微服务
    访问study-user:   http://1127.0.0.1:8888/api/user/client/getFile?name=测试zuul
    访问study-file:   http://1127.0.0.1:8888/api/file/client/getFile?name=测试zuul

4 eureka升级
    服务端的使用：https://blog.csdn.net/qq_15821191/article/details/105581009
    客户端的使用：https://www.cnblogs.com/wps54213/p/13127501.html

5 config配置中心
    5.1 服务端：
        5.1.1 启动注册中心（eureka），启动配置中心服务端（study-config-server）
        5.1.2 数据库中插入服务端：
            INSERT INTO `springcloud`.`config_info`(`id`, `key`, `value`, `application`, `profile`, `label`, `create_date`) VALUES (1, 'foo', 'this is foo', 'study-config-server', 'dev', 'master', '2021-08-24 23:39:26');
            INSERT INTO `springcloud`.`config_info`(`id`, `key`, `value`, `application`, `profile`, `label`, `create_date`) VALUES (2, 'server.port', '9003', 'study-config-server', 'dev', 'master', '2021-08-24 00:19:05');
        5.1.3 浏览器中输入：http://localhost:9001/study-config-server/dev/master
    5.2 客户端
        5.2.1 启动注册中心（eureka），启动配置中心服务端（study-config-server），启动配置中心客户端（study-config-client）
        5.2.2 数据库中插入客户端信息：
            INSERT INTO `springcloud`.`config_info`(`id`, `key`, `value`, `application`, `profile`, `label`, `create_date`) VALUES (3, 'server.port', '9004', 'study-config-client', 'dev', 'master', '2021-08-24 00:55:26');
            INSERT INTO `springcloud`.`config_info`(`id`, `key`, `value`, `application`, `profile`, `label`, `create_date`) VALUES (4, 'foo', 'hello world', 'study-config-client', 'dev', 'master', '2021-08-24 00:56:02');
        5.2.3 测试
            5.2.3.1 启动客户端（study-config-client）的时候发现，启动服务的端口不再是配置文件中的9002，而是数据库中配置的9004
            5.2.3.2 访问客户端服务：http://127.0.0.1:9004/foo，能后返回数据库中配置的信息 hello world
            * 以上两点都可以证明，数据库中配置的信息覆盖了application.yml的信息

6 swagger
    6.1 将依赖放入了common中（如果没有引入common,那么就在各个工程中各自加入两个依赖）。
    6.2 在各个工程中增加SwaggerConfig配置文件
    6.3 在controller层中增加@Api @ApiOperation
    6.4 在浏览器输入地址，就可以看到我们的外露接口，并且可以进行测试
        http://localhost:8816/swagger-ui.html
        http://localhost:8817/swagger-ui.html
    6.5 参考文档：https://www.cnblogs.com/xifengxiaoma/p/11022146.html

7 将common改造成starter
    7.1 在common中增加依赖
        在common中增加resources/META-INF/spring.factories
        在common中增加config properties service
    7.2 在study-user中引入study-common-starter
        编写StarterController测试类
        study-user的配置文件中增加需要的配置信息demo和datasource两个模块。
    7.3 测试：启动study-user
        http://127.0.0.1:8817/starter